[gd_scene load_steps=41 format=2]

[ext_resource path="res://addons/rmsmartshape/shapes/point_array.gd" type="Script" id=1]
[ext_resource path="res://addons/rmsmartshape/materials/shape_material.gd" type="Script" id=2]
[ext_resource path="res://addons/rmsmartshape/shapes/point.gd" type="Script" id=3]
[ext_resource path="res://addons/rmsmartshape/vertex_properties.gd" type="Script" id=4]
[ext_resource path="res://addons/rmsmartshape/shapes/shape_closed.gd" type="Script" id=5]
[ext_resource path="res://assets/ground.png" type="Texture" id=6]
[ext_resource path="res://assets/edge.png" type="Texture" id=7]
[ext_resource path="res://addons/rmsmartshape/materials/edge_material.gd" type="Script" id=8]
[ext_resource path="res://addons/rmsmartshape/normal_range.gd" type="Script" id=9]
[ext_resource path="res://addons/rmsmartshape/materials/edge_material_metadata.gd" type="Script" id=10]
[ext_resource path="res://rocks.tscn" type="PackedScene" id=11]

[sub_resource type="QuadMesh" id=13]
size = Vector2( 8.9, 5 )

[sub_resource type="ViewportTexture" id=14]
viewport_path = NodePath("MeshInstance/Viewport")

[sub_resource type="SpatialMaterial" id=15]
resource_local_to_scene = true
flags_transparent = true
flags_unshaded = true
albedo_texture = SubResource( 14 )

[sub_resource type="Resource" id=88]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=89]
script = ExtResource( 3 )
position = Vector2( 597.805, 191.152 )
point_in = Vector2( -33.373, -32.2286 )
point_out = Vector2( 33.373, 32.2286 )
properties = SubResource( 88 )

[sub_resource type="Resource" id=90]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=91]
script = ExtResource( 3 )
position = Vector2( 333.792, 478.335 )
point_in = Vector2( 37.2108, 33.3775 )
point_out = Vector2( -37.2108, -33.3775 )
properties = SubResource( 90 )

[sub_resource type="Resource" id=92]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=93]
script = ExtResource( 3 )
position = Vector2( 602.639, 476.811 )
point_in = Vector2( 31.5481, -35.4282 )
point_out = Vector2( -31.5481, 35.4282 )
properties = SubResource( 92 )

[sub_resource type="Resource" id=94]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=95]
script = ExtResource( 3 )
position = Vector2( 597.805, 191.152 )
point_in = Vector2( -33.373, -32.2286 )
point_out = Vector2( 33.373, 32.2286 )
properties = SubResource( 94 )

[sub_resource type="Resource" id=96]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=97]
script = ExtResource( 3 )
position = Vector2( 332.016, 192.576 )
point_in = Vector2( -32.5898, 35.0366 )
point_out = Vector2( 32.5898, -35.0366 )
properties = SubResource( 96 )

[sub_resource type="Resource" id=98]
script = ExtResource( 1 )
_points = {
0: SubResource( 89 ),
1: SubResource( 91 ),
2: SubResource( 93 ),
3: SubResource( 95 ),
4: SubResource( 97 )
}
_point_order = [ 3, 2, 1, 4, 0 ]
_constraints = {
[ 0, 3 ]: 15
}
_next_key = 4
_material_overrides = {
}

[sub_resource type="Resource" id=40]
script = ExtResource( 8 )
textures = [ ExtResource( 7 ) ]
texture_normals = [  ]
textures_corner_outer = [  ]
textures_corner_inner = [  ]
texture_normals_corner_outer = [  ]
texture_normals_corner_inner = [  ]
textures_taper_left = [  ]
textures_taper_right = [  ]
texture_normals_taper_left = [  ]
texture_normals_taper_right = [  ]
randomize_texture = false
use_corner_texture = true
use_taper_texture = true
fit_mode = 0

[sub_resource type="Resource" id=41]
script = ExtResource( 9 )
begin = 0.0
distance = 360.0
edgeRendering = Vector2( 0, 0 )

[sub_resource type="Resource" id=42]
script = ExtResource( 10 )
edge_material = SubResource( 40 )
normal_range = SubResource( 41 )
weld = true
render = true
z_index = 0
z_as_relative = true
offset = 1.0

[sub_resource type="Resource" id=12]
script = ExtResource( 2 )
_edge_meta_materials = [ SubResource( 42 ) ]
fill_textures = [ ExtResource( 6 ) ]
fill_texture_normals = [  ]
fill_texture_z_index = -10
fill_texture_show_behind_parent = false
fill_mesh_offset = 0.0
render_offset = 0.0

[sub_resource type="Shader" id=86]
code = "shader_type canvas_item;

//uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform int pixelSize = 4;

const vec4 background = vec4(1., 1., 1., 0.);

float dist(vec4 c1, vec4 c2) {
	return (c1 == c2) ? 0.0 : abs(c1.r - c2.r) + abs(c1.g - c2.g) + abs(c1.b - c2.b);
}

bool similar(vec4 c1, vec4 c2, vec4 input) {
	return (c1 == c2 || (dist(c1, c2) <= dist(input, c2) && dist(c1, c2) <= dist(input, c1)));
}

bool different(vec4 c1, vec4 c2, vec4 input) {
	return !similar(c1, c2, input);
}

// rotsprite 2x enlargement algorithm:
// suppose we are looking at input pixel cE which is surrounded by 8 other 
// pixels:
//  cA cB cC
//  cD cE cF
//  cG cH cI
// and for that 1 input pixel cE we want to output 4 pixels oA, oB, oC, and oD:
//  oA oB
//  oC oD
vec4 scale2x(sampler2D tex, vec2 uv, vec2 pixel_size) {
	vec4 input = texture(tex, uv);

	vec4 cD = texture(tex, uv + pixel_size * vec2(-1., .0));
	cD.a = 1.0;
	vec4 cF = texture(tex, uv + pixel_size * vec2(1., .0));
	cF.a = 1.0;
	vec4 cH = texture(tex, uv + pixel_size * vec2(.0, 1.));
	cH.a = 1.0;
	vec4 cB = texture(tex, uv + pixel_size * vec2(.0, -1.));
	cB.a = 1.0;
	vec4 cA = texture(tex, uv + pixel_size * vec2(-1., -1.));
	cA.a = 1.0;
	vec4 cI = texture(tex, uv + pixel_size * vec2(1., 1.));
	cI.a = 1.0;
	vec4 cG = texture(tex, uv + pixel_size * vec2(-1., 1.));
	cG.a = 1.0;
	vec4 cC = texture(tex, uv + pixel_size * vec2(1., -1.));
	cC.a = 1.0;

	if (different(cD,cF, input)
     && different(cH,cB, input)
     && ((similar(input, cD, input) || similar(input, cH, input) || similar(input, cF, input) || similar(input, cB, input) ||
         ((different(cA, cI, input) || similar(input, cG, input) || similar(input, cC, input)) &&
          (different(cG, cC, input) || similar(input, cA, input) || similar(input, cI, input))))))
    {
		vec2 unit = uv - (floor(uv / pixel_size) * pixel_size);
		vec2 pixel_half_size = pixel_size / 2.0;
		if (unit.x < pixel_half_size.x && unit.y < pixel_half_size.y) {
			return ((similar(cB, cD, input) && ((different(input, cA, input) || different(cB, background, input)) && (different(input, cA, input) || different(input, cI, input) || different(cB, cC, input) || different(cD, cG, input)))) ? cB : input);
		}


		if (unit.x >= pixel_half_size.x && unit.y < pixel_half_size.y) {
			return ((similar(cF, cB, input) && ((different(input, cC, input) || different(cF, background, input)) && (different(input, cC, input) || different(input, cG, input) || different(cF, cI, input) || different(cB, cA, input)))) ? cF : input);
		}

		if (unit.x < pixel_half_size.x && unit.y >= pixel_half_size.y) {
			return ((similar(cD, cH, input) && ((different(input, cG, input) || different(cD, background, input)) && (different(input, cG, input) || different(input, cC, input) || different(cD, cA, input) || different(cH, cI, input)))) ? cD : input);
		}

        return ((similar(cH, cF, input) && ((different(input, cI, input) || different(cH, background, input)) && (different(input, cI, input) || different(input, cA, input) || different(cH, cG, input) || different(cF, cC, input)))) ? cH : input);
    }

	return input;
}

void fragment()
{
	float xRes = 1.0 / SCREEN_PIXEL_SIZE.x;
	float yRes = 1.0 / SCREEN_PIXEL_SIZE.y;
	
//	xRes = max(xRes, resolution.x);
//	yRes = max(yRes, resolution.y);

//	float xAdd = float(xRes) / float(resolution.x);
//	float yAdd = float(yRes) / float(resolution.y);
//	float avrAdd = ceil((xAdd + yAdd) / 2.0);

//	float xFactor = xRes / (float(pixelSize) * avrAdd) * 1.0;
//	float yFactor = yRes / (float(pixelSize) * avrAdd) * 1.0;

	float xFactor = xRes / (float(pixelSize));
	float yFactor = yRes / (float(pixelSize));

	float grid_uv_x = round(SCREEN_UV.x * xFactor) / xFactor;
	float grid_uv_y = round(SCREEN_UV.y * yFactor) / yFactor;

	vec2 pixelated_uv = vec2(grid_uv_x, grid_uv_y);

	vec4 text = texture(SCREEN_TEXTURE, pixelated_uv);

//	COLOR = text;
	COLOR = scale2x(SCREEN_TEXTURE, pixelated_uv, SCREEN_PIXEL_SIZE);

//	vec4 text;
//
//	text.r = texture(SCREEN_TEXTURE, pixelated_uv).r;
//	text.g = texture(SCREEN_TEXTURE, pixelated_uv).g;
//	text.b = texture(SCREEN_TEXTURE, pixelated_uv).b;
//	text.a = 1.0;
}"

[sub_resource type="ShaderMaterial" id=87]
shader = SubResource( 86 )
shader_param/pixelSize = 4

[sub_resource type="Shader" id=54]
code = "shader_type spatial;
render_mode cull_disabled;

uniform float sway = 1.14;
uniform float sway_ = 0.34;
uniform float sway_pow = 1.3;
uniform float grass_roughness = 0.3;
uniform float sway_noise_sampeling_scale = 0.12;
uniform float sway_time_scale = 0.2;
uniform vec3 sway_dir = vec3(1.0,0.0,1.0);
uniform sampler2D sway_noise; //noise with with and height 1000
uniform float color_scale = 0.3;
uniform float color_grad_height = -0.5;
uniform vec4 top_color : hint_color;
uniform vec4 bot_color : hint_color;
uniform vec3 grass_scale = vec3(1.0,1.0,1.0);

varying vec3 vert;
varying float curent_wind;

float sclamp(float f,float sc){
	return clamp(((f-0.5)*sc)+0.5,0.0,1.0);
}

void fragment()
{
	ALBEDO = mix(bot_color,top_color,(vert.y+color_grad_height)*color_scale).xyz;
	NORMAL *= FRONT_FACING ? 1.0 : -1.0;
	SPECULAR = 0.5;
	ROUGHNESS = clamp(1.0-(sclamp(curent_wind,0.8)*grass_roughness),0.2,1);
}

void vertex()
{
	VERTEX *= grass_scale;
	vert = VERTEX;
	NORMAL = vec3(0.0,1.0,0.0);
	vec4 sway_dir_local = vec4(sway_dir,0.0) * WORLD_MATRIX;
	vec3 world_vertex = (WORLD_MATRIX * vec4(VERTEX,1.0)).xyz;
	curent_wind = texture(sway_noise,normalize(sway_dir.xz) * (-TIME*sway_time_scale) + world_vertex.xz*vec2(sway_noise_sampeling_scale)).x;
	VERTEX += normalize(sway_dir_local.xyz) * sway * (VERTEX.y) *  sclamp(curent_wind,1.5);
	VERTEX.y -= sway_*abs(pow(VERTEX.x,sway_pow));
	
}"

[sub_resource type="OpenSimplexNoise" id=57]

[sub_resource type="NoiseTexture" id=56]
seamless = true
noise = SubResource( 57 )

[sub_resource type="ShaderMaterial" id=55]
shader = SubResource( 54 )
shader_param/sway = 1.14
shader_param/sway_ = 0.34
shader_param/sway_pow = 1.3
shader_param/grass_roughness = 0.3
shader_param/sway_noise_sampeling_scale = 0.12
shader_param/sway_time_scale = 0.2
shader_param/sway_dir = Vector3( 1, 0, 1 )
shader_param/color_scale = 0.3
shader_param/color_grad_height = -0.5
shader_param/top_color = null
shader_param/bot_color = null
shader_param/grass_scale = Vector3( 0.1, 0.1, 0.1 )
shader_param/sway_noise = SubResource( 56 )

[sub_resource type="PlaneMesh" id=99]
size = Vector2( 1000, 1000 )

[sub_resource type="SpatialMaterial" id=100]
albedo_color = Color( 0.54902, 0.772549, 0.52549, 1 )

[sub_resource type="QuadMesh" id=72]
size = Vector2( 2, 2 )

[sub_resource type="Shader" id=73]
code = "//THIS SHADER MUST BE APPLIED TO A QUAD (MeshInstance) WITH A SIZE OF (2, 2)
//Extra Cull Margin on the quad should be turned up all the way!

shader_type spatial;
render_mode unshaded, depth_test_disable;

uniform int pixel_size = 2;
//uniform float pixel_uv_intensity : hint_range(0, 10, 0.05) = 0.75;
//uniform float outline_intensity : hint_range(0, 5) = 1;
//uniform float outline_bias : hint_range(-10, 10) = 0;
//uniform vec4 outline_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);

const vec3 MONOCHROME_SCALE = vec3(0.298912, 0.586611, 0.114478);

uniform float luma_coef : hint_range(0, 1, 0.01) = 0.1;
uniform float color_coef : hint_range(0, 1, 0.01) = 0.1;
uniform float depth_coef : hint_range(0, 1, 0.01) = 0.8;
uniform float cutoff : hint_range(0, 1, 0.01) = 0.2;

//uniform vec4 edge_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
//uniform float threshold = 0.0;
//uniform float blend = 0.01;
//uniform bool enable_depth_pass = true;
//uniform float threshold_depth = 0.0;
//uniform float blend_depth = 0.01;
//uniform float distance_fade_length = 50.0;
//uniform float distance_fade_blend = 20.0;


//void vertex(){
//	VERTEX *= 2.0;
//	POSITION = vec4(VERTEX, 1.0);
//}

float getGrayScale(sampler2D sampler, vec2 coods) {
	vec4 color = texture(sampler,coods);
	float gray = (color.r + color.g + color.b)/3.0;
	return gray;
}

float get_linear_depth(sampler2D sampler, vec2 coords, mat4 ipm) {
	float depth = texture(sampler, coords).r;
	vec3 ndc = vec3(coords, depth) * 2.0 - 1.0;
	vec4 view = ipm * vec4(ndc, 1.0);
	view.xyz /= view.w;
	float linear_depth = -view.z;
	return linear_depth;
}

void vertex() {
	POSITION = vec4(VERTEX, 1.0);
}

float gaussian3x3(sampler2D tex, vec2 uv, vec2 pixelsize)
{
	float p = 0.0;
	float coef[9] = {
		0.0625, 0.125, 0.0625,
		0.125, 0.25, 0.125,
		0.0625, 0.125, 0.0625
	};

	for (int y=-1; y<=1; y++ ) {
		for (int x=-1; x<=1; x ++ ) {
			p += textureLod( tex, uv + vec2( float( x ), float( y ) ) * pixelsize, 0.0 ).r * coef[(y+1)*3 + (x+1)];
		}
	}

	return p;
}

void fragment() {
	vec2 screen_size = vec2(textureSize(SCREEN_TEXTURE, 1));

	float x_factor = screen_size.x / (float(pixel_size));
	float y_factor = screen_size.y / (float(pixel_size));

	float grid_uv_x = round(SCREEN_UV.x * x_factor) / x_factor;
	float grid_uv_y = round(SCREEN_UV.y * y_factor) / y_factor;

	vec2 pixelated_uv = vec2(grid_uv_x, grid_uv_y);
	
	
//	vec2 delta = vec2(0.0,0.003);
//	vec2 SCREEN_PIXEL_SIZE = 1.0 / VIEWPORT_SIZE;
//	vec2 iResolution = VIEWPORT_SIZE;
//	float m = max(iResolution.x,iResolution.y);
//	vec2 texCoords = SCREEN_UV;
//
//	vec3 screen_color = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
//
//	float c1y = getGrayScale(SCREEN_TEXTURE, texCoords.xy-delta/2.0);
//	float c2y = getGrayScale(SCREEN_TEXTURE, texCoords.xy+delta/2.0);
//	float c1x = getGrayScale(SCREEN_TEXTURE, texCoords.xy-delta.yx/2.0);
//	float c2x = getGrayScale(SCREEN_TEXTURE, texCoords.xy+delta.yx/2.0);
//	float dcdx = (c2x - c1x)/(delta.y*10.0);
//	float dcdy = (c2y - c1y)/(delta.y*10.0);
//
//	vec2 dcdi = vec2(dcdx,dcdy);
//	float edge = length(dcdi)/10.0;
//	edge = 1.0 - edge;
//	edge = smoothstep(threshold, threshold + blend, edge);
//	float final_edge = edge;
//
//	// Depth-Pass
//	if (enable_depth_pass) {
//		c1y = get_linear_depth(DEPTH_TEXTURE, texCoords.xy-delta/2.0, INV_PROJECTION_MATRIX);
//		c2y = get_linear_depth(DEPTH_TEXTURE, texCoords.xy+delta/2.0, INV_PROJECTION_MATRIX);
//		c1x = get_linear_depth(DEPTH_TEXTURE, texCoords.xy-delta.yx/2.0, INV_PROJECTION_MATRIX);
//		c2x = get_linear_depth(DEPTH_TEXTURE, texCoords.xy+delta.yx/2.0, INV_PROJECTION_MATRIX);
//		dcdx = (c2x - c1x)/(delta.y*10.0);
//		dcdy = (c2y - c1y)/(delta.y*10.0);
//		dcdi = vec2(dcdx,dcdy);
//		float depth_edge = length(dcdi)/10.0;
//		depth_edge = 1.0 - depth_edge;
//		depth_edge = smoothstep(threshold_depth, threshold_depth + blend_depth, depth_edge);
//		final_edge *= depth_edge;
//	}
//
//	// Distance Fading
//	float linear_depth = get_linear_depth(DEPTH_TEXTURE, SCREEN_UV, INV_PROJECTION_MATRIX);
//	float df = 1.0 - smoothstep(distance_fade_length, distance_fade_length + distance_fade_blend, linear_depth);
//	final_edge = (1.0 - final_edge) * df;
//	final_edge = 1.0 - final_edge;
//
//	ALBEDO = mix(edge_color.rgb, screen_color.rgb, final_edge);
	
	
//	float px = pixel_uv_intensity / screen_size.x;
//	float py = pixel_uv_intensity / screen_size.y;
//
//	float d = texture(DEPTH_TEXTURE, pixelated_uv).x;
//	float du = texture(DEPTH_TEXTURE, pixelated_uv + vec2(0.0, py)).x;
//	float dd = texture(DEPTH_TEXTURE, pixelated_uv + vec2(0.0, -py)).x;
//	float dr = texture(DEPTH_TEXTURE, pixelated_uv + vec2(px, 0.0)).x;
//	float dl = texture(DEPTH_TEXTURE, pixelated_uv + vec2(-px, 0.0)).x;
//
//	float dq = texture(DEPTH_TEXTURE, pixelated_uv + vec2(-px, py)).x;
//	float de = texture(DEPTH_TEXTURE, pixelated_uv + vec2(px, py)).x;
//	float dz = texture(DEPTH_TEXTURE, pixelated_uv + vec2(-px, -py)).x;
//	float dc = texture(DEPTH_TEXTURE, pixelated_uv + vec2(px, -py)).x;
//
//
//	float alpha_outline = 0.0 + abs(abs(abs(d) - abs(du)) - abs(abs(d) - abs(dd))) + abs(abs(abs(d) - abs(dl)) - abs(abs(d) - abs(dr)));
//
//	alpha_outline *= 3.0 * 50000.0 * outline_intensity;
//
////	float alpha_outline = 0.0 + abs(abs(abs(d) - abs(du)) - abs(abs(d) - abs(dd))) + abs(abs(abs(d) - abs(dl)) - abs(abs(d) - abs(dr))) + abs(abs(abs(d) - abs(dq)) - abs(abs(d) - abs(dc))) + abs(abs(abs(d) - abs(dz)) - abs(abs(d) - abs(de)));
////
////	alpha_outline *= 50000.0 * outline_intensity;

	vec4 text = texture(SCREEN_TEXTURE, pixelated_uv);
//	vec4 text = texture(SCREEN_TEXTURE, SCREEN_UV);

	vec3 color[9];
	float depth[9];
	vec2 pixelsize = ( vec2( 1.0, 1.0 ) / VIEWPORT_SIZE ) * 1.15;

	// Gaussian FilterとSobel FilterでColor/Depthで取る
	for( int y=0; y<3; y ++ ) {
		for( int x=0; x<3; x ++ ) {
			vec2 uv = pixelated_uv + vec2( float( x-1 ), float( y-1 ) ) * pixelsize;
			vec4 ndc = vec4( uv, gaussian3x3( DEPTH_TEXTURE, uv, pixelsize ), 1.0 ) * 2.0 - 1.0;
			vec4 screen_pixel_coord = INV_PROJECTION_MATRIX * ndc;

			color[y*3+x] = textureLod( SCREEN_TEXTURE, uv, 0.0 ).rgb;
			depth[y*3+x] = -( screen_pixel_coord.z / screen_pixel_coord.w );
		}
	}

	vec3 color_sobel_src_x = (
		color[0] * -1.0
	+	color[3] * -2.0
	+	color[6] * -1.0
	+	color[2] * 1.0
	+	color[5] * 2.0
	+	color[8] * 1.0
	);
	vec3 color_sobel_src_y = (
		color[0] * -1.0
	+	color[1] * -2.0
	+	color[2] * -1.0
	+	color[6] * 1.0
	+	color[7] * 2.0
	+	color[8] * 1.0
	);
	vec3 color_sobel = sqrt( color_sobel_src_x * color_sobel_src_x + color_sobel_src_y * color_sobel_src_y );

	vec2 depth_sobel_src = vec2(
		(
			depth[0] * -1.0
		+	depth[3] * -2.0
		+	depth[6] * -1.0
		+	depth[2] * 1.0
		+	depth[5] * 2.0
		+	depth[8] * 1.0
		)
	,	(
			depth[0] * -1.0
		+	depth[1] * -2.0
		+	depth[2] * -1.0
		+	depth[6] * 1.0
		+	depth[7] * 2.0
		+	depth[8] * 1.0
		)
	);
	float depth_sobel = clamp( sqrt( dot( depth_sobel_src, depth_sobel_src ) ), 0.0, 1.0 );
	
	float alpha_outline = clamp(
		depth_sobel * depth_coef
	+	depth_sobel * dot( color_sobel, MONOCHROME_SCALE ) * luma_coef
	+	depth_sobel * length( color_sobel ) * color_coef
	-	cutoff
	,	0.0
	,	1.0
	);

	ALBEDO = text.rgb * (1.0 - alpha_outline);

//	ALBEDO = text.rgb;
//	ALBEDO = text.rgb * (1.0 - alpha_outline * outline_color.a);
}"

[sub_resource type="ShaderMaterial" id=74]
shader = SubResource( 73 )
shader_param/pixel_size = 2
shader_param/luma_coef = 0.1
shader_param/color_coef = 0.1
shader_param/depth_coef = 0.8
shader_param/cutoff = 0.4

[node name="Spatial" type="Spatial"]

[node name="Sprite3D" type="Sprite3D" parent="."]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0.448185, 0 )
visible = false
mesh = SubResource( 13 )
material/0 = SubResource( 15 )

[node name="Viewport" type="Viewport" parent="MeshInstance"]
size = Vector2( 1920, 1080 )
transparent_bg = true
usage = 0
render_target_v_flip = true

[node name="SS2D_Shape_Closed" type="Node2D" parent="MeshInstance/Viewport"]
script = ExtResource( 5 )
_points = SubResource( 98 )
material_overrides = null
shape_material = SubResource( 12 )
tessellation_stages = 5
tessellation_tolerence = 4.0
flip_edges = false
render_edges = true
collision_size = 32.0
collision_offset = 0.0
collision_polygon_node_path = NodePath("")

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 29.4644, 27.1867 )
current = true

[node name="CanvasLayer" type="CanvasLayer" parent="Camera"]

[node name="ColorRect" type="ColorRect" parent="Camera/CanvasLayer"]
visible = false
material = SubResource( 87 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_clip_content = true

[node name="CSGPolygon" type="CSGPolygon" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, -0.426607, 1.96217, -0.948191 )
visible = false
polygon = PoolVector2Array( -24.1243, -24.5011, -11.0723, 20.3506, 10.619, 20.0753, 13.45, -18.8859 )
material = SubResource( 55 )

[node name="CSGBox" type="CSGBox" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.04047, 0 )

[node name="CSGBox2" type="CSGBox" parent="."]
transform = Transform( 0.772658, -0.179197, 0.609005, 0.140736, 0.983813, 0.110928, -0.619025, 0, 0.785371, 0, 1.04047, -3.96272 )

[node name="CSGBox3" type="CSGBox" parent="."]
transform = Transform( 0.772658, -0.179197, 0.609005, 0.140736, 0.983813, 0.110928, -0.619025, 0, 0.785371, -9.41924, 1.04047, -3.96272 )

[node name="rocksSet1" parent="." instance=ExtResource( 11 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -4.40768, 0.173987, 10.0318 )

[node name="MeshInstance3" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.09596, 0, 1.86995 )
mesh = SubResource( 99 )
material/0 = SubResource( 100 )

[node name="SS Pixelate Outline" type="MeshInstance" parent="."]
mesh = SubResource( 72 )
material/0 = SubResource( 74 )
